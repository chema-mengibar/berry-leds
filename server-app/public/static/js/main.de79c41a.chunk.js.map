{"version":3,"sources":["shared/theme.shared.js","style/main.style.js","components/AppWrapper/AppWrapper.js","components/BlockLed/Server.BlockLed.js","components/BlockLed/BlockLed.js","store/actions.store.js","components/BlockControl/ColorBarWrapper.BlockControl.js","components/BlockControl/BlockControl.js","App.js","store/reducer.store.js","index.js"],"names":["theme","color","light","grey_dark","grey_light","red","green","blue","fontFamily","primary","fontWeigth","bold","MainCSS","createGlobalStyle","_templateObject","Wrapper","styled","div","AppWrapper_templateObject","AppWrapper","_ref","children","react_default","a","createElement","main_style","Server_BlockLed","sendRGB","_sendRGB","Object","asyncToGenerator","regenerator_default","mark","_callee","opts","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","response","json","data","console","log","html_url","stop","_x","apply","this","arguments","mapDispatchToProps","setColor","type","channelsToHex","channels","Server","rangeTo255Hex","value","hexStr","Math","round","toString","toUpperCase","length","BlockLedWrapper","BlockLed_templateObject","BlockLedLabel","_templateObject2","Span","span","_templateObject3","ColorInfo","_templateObject4","ColorInfoIcon","_templateObject5","props","hexcolor","ColorInfoData","_templateObject6","connect","state","appState","className","setChannel","channel","RgbColorRange","ColorBarWrapper_BlockControl_templateObject","ColorRangeBar","ColorBarWrapper_BlockControl_templateObject2","ColorRangeCursor","ColorBarWrapper_BlockControl_templateObject3","procent","ColorRangeValue","ColorBarWrapper_BlockControl_templateObject4","ownProps","objectSpread","rgbColor","mode","_useState","useState","name","_useState2","slicedToArray","rgbChannel","setRgbChannel","modeMap","pwm","dec","hex","useEffect","onClick","e","yCursorPosition","nativeEvent","offsetX","currentTarget","getBoundingClientRect","width","convertedValue","valueConversion","storeSetMode","BlockControlWrapper","BlockControl_templateObject","BlockControlLabel","BlockControl_templateObject2","MenuMode","BlockControl_templateObject3","Tab","BlockControl_templateObject4","active","css","BlockControl_templateObject5","RgbSelector","BlockControl_templateObject6","tabs","id","label","rgb","map","item","key","uniqueId","tab","ColorBarWrapper_BlockControl","App","components_AppWrapper_AppWrapper","components_BlockLed_BlockLed","components_BlockControl_BlockControl","initialState","max","combineReducers","undefined","action","defineProperty","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.de79c41a.chunk.js","sourcesContent":["const theme = {\n  color: {\n    light: '255,255,255',\n    grey_dark: '29,28,32',\n    grey_light: '56,54,61',\n\n    red: '#ff0000',\n    green: '#00FF00',\n    blue: '#00FFFF',\n\n  },\n  fontFamily: {\n    primary: 'Lato'\n  },\n  fontWeigth: {\n    primary: '300',\n    bold: '700',\n  }\n};\n\nexport default theme;","import { createGlobalStyle } from 'styled-components';\nimport theme from 'shared/theme.shared'\n\nconst MainCSS = createGlobalStyle`\n\n  @import url('https://fonts.googleapis.com/css?family=Lato:300,700');\n\n  html, body, #root{\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n    box-sizing: border-box;\n    width: 100%;\n    min-height: 100%;\n    height:100%;\n  }\n\n  body {\n    line-height: 1;\n    font-family: ${ theme.fontFamily.primary};\n  }\n\n`;\n\nexport default MainCSS;","// @flow\n\nimport React, { Component, Fragment } from 'react';\nimport styled, { css } from 'styled-components';\nimport MainCSS from 'style/main.style';\nimport theme from 'shared/theme.shared';\n\nconst Wrapper = styled.div`\n  background-color: red;\n  height:100%;\n  width:100%;  \n  display:flex;\n  flex-direction:column;\n \n  @media (max-width: 700px) {\n    background-color: ${theme.color.green};\n  }\n`;\n\n//AppWrapper or Fragment\nconst AppWrapper = ({\n  children,\n}:Props):Node => (\n  <Wrapper>\n    <MainCSS/>\n    {children}\n  </Wrapper>\n);\n\nexport default AppWrapper;","export default {\n\n  // fetchAsyncMD: async ( libUrl ) => {\n  //   //https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch\n  //   //https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n\n  //   // var myHeaders = new Headers();\n  //   // myHeaders.append(\"Content-Type\", \"text/plain\");\n  //   // myHeaders.append(\"Content-Length\", content.length.toString());\n  //   // myHeaders.append(\"X-Custom-Header\", \"ProcessThisImmediately\");\n\n  //   // var miInit = { method: 'GET',\n  //   //        headers: myHeaders,\n  //   //        mode: 'no-cors',\n  //   //        cache: 'default' };\n\n  //   //let response = await fetch( libUrl, miInit );\n\n  //   var myHeaders = new Headers();\n  //   myHeaders.append(\"Content-Type\", \"text/plain\");\n  //   var miInit = { method: 'GET',\n  //         headers: myHeaders,\n  //         mode: 'cors',\n  //         cache: 'default' };\n  //   let response = await fetch( libUrl, miInit );\n\n  //   let data = await response;\n  //   return data.text();\n\n  // },\n\n  sendRGB: async(opts) => {\n    fetch('/color', {\n      method: 'post',\n      headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(opts)\n    }).then(function(response) {\n      return response.json();\n    }).then(function(data) {\n      console.log( 'responseerror', data.html_url);\n    });\n  }\n\n}\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport theme from 'shared/theme.shared'\nimport Server from './Server.BlockLed';\n\nimport { connect } from 'react-redux';\nimport { setColor } from 'store/actions.store';\n\nconst mapStateToProps = state => ({\n  color: channelsToHex( state.appState.channels )\n});\n\nconst mapDispatchToProps = {\n  setColor: setColor\n}\n\nconst channelsToHex = channels => {\n\n  Server.sendRGB( channels );\n  \n  const rangeTo255Hex = value =>{ \n    let hexStr = Math.round(( value * 255)/ 100).toString(16).toUpperCase();\n    return ( hexStr.length === 1 )? '0' + hexStr : hexStr;\n  };\n\n  let r = rangeTo255Hex(channels.red)\n  let g = rangeTo255Hex(channels.green)\n  let b = rangeTo255Hex(channels.blue)\n  return '#' + r + g + b;\n}\n\nconst BlockLedWrapper = styled.div`\n\n  background: rgb(${theme.color.grey_dark});\n  // background: -moz-linear-gradient(-45deg, rgb(${theme.color.grey_light}) 0%, rgb(${theme.color.grey_dark}) 63%); \n  // background: -webkit-linear-gradient(-45deg, rgb(${theme.color.grey_light}) 0%, rgb(${theme.color.grey_dark}) 63%);\n  background: linear-gradient( 165deg, rgb(${theme.color.grey_light}) 0%, rgb(${theme.color.grey_dark}) 63%);\n  // filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='rgb(${theme.color.grey_light})', endColorstr='rgb(${theme.color.grey_dark})',GradientType=1 );\n  overflow:auto;\n  min-height:200px;\n  width:100%;  \n  padding:30px 20px 0;\n  box-sizing: border-box;\n`\n\nconst BlockLedLabel = styled.div`\n  margin:0;\n  padding:0;\n  height:20px;\n  width:100%;\n  height:auto;\n  float:left;\n`;\n\nconst Span = styled.span`\n    color:rgb( ${theme.color.light});\n    font-weight: ${theme.fontWeigth.primary};\n    font-size:28px;\n    text-transform: uppercase;\n`;\n\nconst ColorInfo = styled.div`\n  float:left;\n  min-height:100px;\n  height:auto;\n  overflow:hidde;\n  width:100%;\n  margin-top:10px;\n`;\n\nconst ColorInfoIcon = styled.div`\n  float:left;\n  height:100px;\n  width:100px;\n  border:10px solid rgba(12,12,12,.5);\n  border-radius: 0px 30px 30px 30px;\n  background-color: ${(props) => props.hexcolor };\n  margin-right:20px;\n`\n\nconst ColorInfoData = styled.div`\n\n  color: rgb(${theme.color.light});\n  text-transform: uppercase;\n  line-height: 100px;\n  \n  .color-info-data__label{\n    font-weight: ${theme.fontWeigth.primary};\n    margin-right:7px;\n  }\n\n  .color-info-data__value{\n    font-weight: ${theme.fontWeigth.bold};\n  }\n`\n\nconst BlockLed = (props) => {\n  return(\n    <BlockLedWrapper>\n      <BlockLedLabel> \n        <Span>Led</Span>\n      </BlockLedLabel>\n      <ColorInfo>\n        <ColorInfoIcon hexcolor={props.color}></ColorInfoIcon>\n        <ColorInfoData>\n          <span className=\"color-info-data__label\">HEX</span>\n          <span className=\"color-info-data__value\"> {props.color} </span>\n        </ColorInfoData>\n      </ColorInfo>\n    </BlockLedWrapper>\n  )\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps )( BlockLed )","export const setColor = color => ({\n  type: 'SET_COLOR',\n  color\n})\n\nexport const setChannel = ( value, channel ) => {\n  return {\n    type: 'SET_CHANNEL',\n    value,\n    channel\n  }\n}\n\nexport const setMode = mode => ({\n  type: 'SET_MODE',\n  mode\n})","import React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport theme from 'shared/theme.shared';\n\nimport { connect } from 'react-redux';\nimport { setChannel, setColor } from 'store/actions.store';\n\nconst mapStateToProps = (state, ownProps) => ({\n  // rgbColor: ownProps.rgbColor,\n  // mode: ownProps.mode,\n  ...ownProps,\n  channels: state.appState.channels,\n});\n\nconst mapDispatchToProps = {\n  setChannel: setChannel,\n}\n\nconst RgbColorRange = styled.div`\n  display:flex;\n  height:40px;\n  width:100%;\n  margin-top:20px;\n  position:relative;\n  float:left;\n`\nconst ColorRangeBar = styled.div`\n  height:100%;\n  flex-grow:1;\n  background-color: rgba( ${theme.color.grey_dark}, .1 );\n  cursor:pointer;\n`\n\nconst ColorRangeCursor = styled.div`\n  width:  ${props => props.procent + '%'};\n  height:100%;\n  background-color: ${props => props.color };\n  -webkit-transition: width ${props => props.procent}ms ease-out;\n  -ms-transition: width 400ms ease-out;\n  transition: width 400ms ease-out;\n`\n\nconst ColorRangeValue = styled.div`\n  width:40px;\n  height: 100%;\n  background-color: rgb(${theme.color.grey_dark});\n  color:rgb(  ${theme.color.light} );\n  line-height:40px;\n  text-align:center;\n  cursor:pointer;\n`\n\nconst ColorBarWrapper = ( props\n  //{ rgbColor = { name:'white', color:'#ffffff'  },  mode = 'pwm' }\n) => {\n\n  const  rgbColor = props.rgbColor; //{ name:'red', color:'#ff0000'  };\n  const mode = props.mode; // 'pwm';\n\n  const [ rgbChannel, setRgbChannel] = useState( props.channels[ rgbColor.name ] );\n  const modeMap = {\n    pwm: 100,\n    dec: 255,\n    hex: 255\n  };\n\n  useEffect(() => {\n    props.setChannel( rgbChannel, rgbColor.name )\n  }, [rgbChannel]);\n\n\n  const valueConversion = ( value ) => {\n    let convertedValue =  Math.round(( value * modeMap[mode])/ 100);\n    if (mode === 'hex'){\n      let hex =  convertedValue.toString(16).toUpperCase();\n      convertedValue = ( hex.length === 1 ) ?  '0'+hex : hex;\n    }  \n    return convertedValue;\n  }\n\n  return (\n    <RgbColorRange>\n      <ColorRangeBar onClick={(e)=> { \n          let yCursorPosition = Math.round( (e.nativeEvent.offsetX * 100 ) / e.currentTarget.getBoundingClientRect().width);\n          setRgbChannel( yCursorPosition );\n        } } >\n        <ColorRangeCursor color={ rgbColor.color } procent={ rgbChannel }></ColorRangeCursor>\n      </ColorRangeBar>\n      <ColorRangeValue onClick={(e)=> { \n          let xtremValue = (rgbChannel === 100 )? 0 : 100;\n          setRgbChannel( xtremValue );\n        } } > { valueConversion( rgbChannel ) } </ColorRangeValue>\n    </RgbColorRange>\n  )\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps )( ColorBarWrapper )","import React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport uniqueId from 'lodash/uniqueId';\nimport theme from 'shared/theme.shared';\nimport ColorBarWrapper from './ColorBarWrapper.BlockControl';\nimport { connect } from 'react-redux';\nimport { setMode } from 'store/actions.store';\n\nconst mapStateToProps = (state, ownProps) => ({\n  ...ownProps,\n  mode: state.appState.mode,\n});\n\nconst mapDispatchToProps = {\n  storeSetMode: setMode\n}\n\nconst BlockControlWrapper = styled.div`\n  height:250px;\n  width:100%;  \n  padding:30px 0 0;\n  background-color: rgb(${theme.color.grey_dark});\n  flex-grow:1;\n  box-sizing: border-box;\n`\n\nconst BlockControlLabel = styled.div`\n  padding-left:30px;\n  margin-bottom:20px;\n\n  .title{\n    color:rgb( ${theme.color.light} );\n    font-weight: ${theme.fontWeigth.primary};\n    font-size:28px;\n    text-transform: uppercase;\n  }\n`\nconst MenuMode = styled.div`\n  height:30px;\n  width:100%;\n  display:flex;\n  flex-direction:row;\n`\nconst Tab = styled.div`\n  flex-grow:1;\n  text-align:center;\n  line-height:30px;\n  background: rgba( ${theme.color.light} , .04);\n  color: rgb(${theme.color.light});\n  cursor:pointer;\n  -webkit-transition: background-color 400ms ease-in;\n  -ms-transition: background-color 400ms ease-in;\n  transition: background-color 400ms ease-in;\n  \n  // ${ (props) => props.active && css`\n  //   background: rgba( ${theme.color.light}, 1.0);\n  //   color: rgb(${theme.color.grey_dark});\n  // `}\n  \n  &.active{\n    background: rgba( ${theme.color.light}, 1.0);\n    color: rgb(${theme.color.grey_dark});\n  }\n`\n\nconst RgbSelector = styled.div`\n  background-color:rgb( ${theme.color.light} );\n  height:100%;\n  width:100%;\n`\n\nconst BlockControl = (props) => {\n\n  const tabs = [\n    { id:0, label:'PWM', mode:'pwm' },\n    { id:1, label:'DEC', mode:'dec' },\n    { id:2, label:'HEX', mode:'hex' }\n  ];\n\n  const rgb = [\n    { name:'red', color: '#ff0000'}, \n    { name:'green', color: '#00FF00'}, \n    { name:'blue', color: '#00FFFF'}, \n  ];\n\n  const mode = props.mode;\n\n  return(\n    <BlockControlWrapper>\n      <BlockControlLabel> <span className=\"title\">rgb Control</span> </BlockControlLabel>\n      <MenuMode>\n        {\n          tabs && tabs[0] &&\n          tabs.map((item)=>{\n            return (\n              <Tab\n                key={uniqueId('tab_')}\n                tab={item} \n                className={ item.mode === mode ? 'active' : '' }\n                onClick={ ()=> { \n                  props.storeSetMode( item.mode );\n                 } } \n              >\n                {item.label}\n              </Tab>\n            );\n          })\n        }\n      </MenuMode>\n      <RgbSelector>\n        {\n          rgb && rgb[0] &&\n          rgb.map((rgbColor) =>{\n            return (\n              <ColorBarWrapper mode={mode} rgbColor={rgbColor} key={uniqueId('rgb-color_')}/>\n            )\n          } )\n        }\n      </RgbSelector>\n    </BlockControlWrapper>\n  )\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps )( BlockControl )","import React, { useState } from 'react';\nimport AppWrapper from './components/AppWrapper/AppWrapper';\nimport BlockLed from './components/BlockLed/BlockLed';\nimport BlockControl from './components/BlockControl/BlockControl';\n\nconst App = () => {\n  return(\n    <AppWrapper>\n      <BlockLed/>\n      <BlockControl/>\n    </AppWrapper>\n  );\n};\n\nexport default App;","import { combineReducers } from 'redux'\n\nconst initialState = {\n  mode:'pwm',\n  color: '#000000',\n  channels:{\n    red:0,\n    green:0,\n    blue:0,\n    max:100\n  }\n}\n\nconst appState = (state = initialState , action) => {\n  switch (action.type) {\n    case 'SET_COLOR':\n      return { ...state, color: action.color}\n    case 'SET_MODE':\n      return { ...state, mode: action.mode}\n    case 'SET_CHANNEL':\n      return { ...state, \n        channels:{ \n          ...state.channels,\n          [ action.channel ]: action.value\n        }\n      }\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({\n  appState\n})","import React  from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from './App';\n\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from 'store/reducer.store'\n\nconst store = createStore( \n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}